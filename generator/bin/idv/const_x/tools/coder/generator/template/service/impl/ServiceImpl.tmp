package @{package}.@{modulelower}.service.impl;

import com.raycloud.ding.commons.model.model.Result;
import @{package}.@{modulelower}.dao.@{entryFristUpper}Dao;
import @{package}.@{modulelower}.pojo.@{entryFristUpper};
import @{package}.@{modulelower}.query.@{entryFristUpper}Query;
import @{package}.@{modulelower}.service.@{entryFristUpper}Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

/**
 *
 * @{entityAlias}后台服务
 *
 * @author @{author}
 * @since  @{date}
 */
@Service
public class @{entryFristUpper}ServiceImpl implements @{entryFristUpper}Service {

    private static Logger logger = LoggerFactory.getLogger(@{entryFristUpper}ServiceImpl.class);

    @Resource
    private @{entryFristUpper}Dao @{entryFristUpper}Dao;

    @Override
    public Long add@{entryFristUpper}(@{entryFristUpper} record) {
        try {
            return @{entryFristUpper}Dao.add@{entryFristUpper}(record);
        } catch (SQLException e) {
            logger.error("dao add@{entryFristUpper} error.:" + e.getMessage(), e);
        }
        return -1L;
    }

    @Override
    public @{entryFristUpper} get@{entryFristUpper}ByKey(Long id) {
        try {
            return @{entryFristUpper}Dao.get@{entryFristUpper}ByKey(id);
        } catch (SQLException e) {
            logger.error("dao get@{entryFristUpper}byKey error.:" + e.getMessage(), e);
        }
        return null;
    }


    @Override
    public Integer update@{entryFristUpper}ByKey(@{entryFristUpper} record) {
        try {
            return @{entryFristUpper}Dao.update@{entryFristUpper}ByKey(record);
        } catch (SQLException e) {
            logger.error("dao update@{entryFristUpper} error.@{entryFristUpper}:" + e.getMessage(), e);
        }
        return -1;
    }

    @Override
    public Integer update@{entryFristUpper}SelectiveByKey(@{entryFristUpper} record) {
        try {
            return @{entryFristUpper}Dao.update@{entryFristUpper}SelectiveByKey(record);
        } catch (SQLException e) {
            logger.error("dao update@{entryFristUpper} error.@{entryFristUpper}:" + e.getMessage(), e);
        }
        return -1;
    }


    @Override
    public Result<@{entryFristUpper}> get@{entryFristUpper}ListWithPage(@{entryFristUpper}Query query) {
        Result<@{entryFristUpper}> rs = null;
        try {
            rs = @{entryFristUpper}Dao.get@{entryFristUpper}ListWithPage(query);
            if (!rs.isSuccess()) {
                logger.error("get @{entryFristUpper} error." + rs.getErrorMsg());
            }
        } catch (SQLException e) {
            logger.error(e.getMessage());
        }
        return rs;
    }

    @Override
    public List<@{entryFristUpper}> get@{entryFristUpper}List(@{entryFristUpper}Query query) {
        try {
            return @{entryFristUpper}Dao.get@{entryFristUpper}List(query);
        } catch (SQLException e) {
            logger.error("get @{entryFristUpper} list error." + e.getMessage(), e);
        }
        return Collections.emptyList();
    }

    @Override
    public Integer deleteByKey(Long id) {
        try {
            return @{entryFristUpper}Dao.deleteByKey(id);
        } catch (SQLException e) {
            logger.error("dao deleteByKey error. :" + e.getMessage(), e);
        }
        return -1;
    }

    @Override
    public Integer deleteByCorpId(String corpId) {
        try {
            return @{entryFristUpper}Dao.deleteByCorpId(corpId);
        } catch (SQLException e) {
            logger.error("dao deleteByCorpId error. :" + e.getMessage(), e);
        }
        return -1;
    }

}
