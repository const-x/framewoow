package @{package}.@{modulelower}.dao;

import com.google.common.collect.Maps;
import com.raycloud.ding.commons.model.model.Result;
import com.raycloud.ding.commons.model.utils.CastUtils;
import @{package}.@{modulelower}.pojo.@{entryFristUpper};
import @{package}.@{modulelower}.query.@{entryFristUpper}Query;
import com.raycloud.yc.eco.ding.app.com.common.dao.adapter.SqlSessionMapClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;


/**
 * @{entityAlias}数据库操作
 * @author @{author}
 * @since  @{date}
 */
@Repository
public class @{entryFristUpper}Dao {

    private static Logger logger = LoggerFactory.getLogger(@{entryFristUpper}Dao.class);

    @Autowired
    private SqlSessionMapClient sqlSessionMapClient;


    /**
     * 新增数据
     *
     * @return
     * @throws SQLException
     */
    public Long add@{entryFristUpper}(@{entryFristUpper} record) throws SQLException {
        int insert = sqlSessionMapClient.insert("@{entryFristUpper}.insert@{entryFristUpper}", record);
        if (insert > 0) {
            return record.getId();
        }
        return -1L;
    }
	
    /**
     * 根据主键查找
     *
     * @throws SQLException
     */
    public @{entryFristUpper} get@{entryFristUpper}ByKey(Long id) throws SQLException {
        Map<String, Object> params = Maps.newHashMap();
        params.put("id", id);
        return sqlSessionMapClient.queryForObject("@{entryFristUpper}.get@{entryFristUpper}ByKey", params);
    }

    /**
     * 按条件分页查询
     *
     * @param query
     * @return
     */
    public Result<@{entryFristUpper}> get@{entryFristUpper}ListWithPage(@{entryFristUpper}Query query) throws SQLException {
        Result<@{entryFristUpper}> rs = new Result<@{entryFristUpper}>();
        Map<String, Object> params = query.getParams();
        Integer count = sqlSessionMapClient.queryForObject("@{entryFristUpper}.get@{entryFristUpper}ListCount", params);
        rs.setCount(count);
        if (count <= 0) {
            return rs;
        }
        try {
            rs.setList(get@{entryFristUpper}List(params, "@{entryFristUpper}.get@{entryFristUpper}ListWithPage"));
        } catch (SQLException e) {
            logger.error(e.getMessage());
        }
        return rs;
    }

    /**
     * 按条件查询
     *
     * @param query
     * @return
     */
    public List<@{entryFristUpper}> get@{entryFristUpper}List(@{entryFristUpper}Query query) throws SQLException {
        return get@{entryFristUpper}List(query.getParams(), "@{entryFristUpper}.get@{entryFristUpper}List");
    }


    private List<@{entryFristUpper}> get@{entryFristUpper}List(Map<String, Object> params, String statementName) throws SQLException {
        return CastUtils.cast(sqlSessionMapClient.queryForList(statementName, params));
    }

    /**
     * 根据主键删除
     *
     * @return
     * @throws SQLException
     */
    public Integer deleteByKey(Long id) throws SQLException {
        Map<String, Object> params = Maps.newHashMap();
        params.put("id", id);
        return sqlSessionMapClient.delete("@{entryFristUpper}.deleteByKey", params);
    }

    public Integer deleteByCorpId(String corpId) throws SQLException {
        Map<String, Object> params = Maps.newHashMap();
        params.put("corpId", corpId);
        return sqlSessionMapClient.delete("@{entryFristUpper}.deleteByCorpId", params);
    }

    /**
     * 根据主键更新
     *
     * @return
     * @throws SQLException
     */
    public Integer update@{entryFristUpper}ByKey(@{entryFristUpper} record) throws SQLException {
        return sqlSessionMapClient.update("@{entryFristUpper}.update@{entryFristUpper}ByKey", record);
    }

    /**
     * 根据主键更新
     *
     * @return
     * @throws SQLException
     */
    public Integer update@{entryFristUpper}SelectiveByKey(@{entryFristUpper} record) throws SQLException {
        return sqlSessionMapClient.update("@{entryFristUpper}.update@{entryFristUpper}SelectiveByKey", record);
    }

}
